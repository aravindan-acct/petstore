import connexion
import six
import json
from db.db import Pets
from db.db import Tags
from db.db import Photos
from db.db import db_conn
from swagger_server.models.api_response import ApiResponse  # noqa: E501
from swagger_server.models.pet import Pet  # noqa: E501
from swagger_server import util
import sqlalchemy as db
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import sessionmaker
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
import re

engine, Base = db_conn()

class Pets(Base):
    __tablename__ = 'Pets'

    id = Column(Integer, primary_key=True)
    name = Column(String(50))
    status = Column(String(50))

    def __repr__(self):
        return "<Pets(name='%s', status='%s')>" %(self.name, self.status)

class Tags(Base):
    __tablename__ = 'Tags'

    id = Column(Integer, primary_key=True)
    tag1 = Column(String(50))
    tag2 = Column(String(50))
    pet_id = Column(Integer, ForeignKey('Pets.id'))

    tag = relationship("Pets", back_populates="Tags")
    Pets.Tags = relationship("Tags", order_by = id, back_populates="tag")
    def __repr__(self):
        return "<Tags(tag1='%s', tag2='%s')>" %(self.tag1, self.tag2)


class Photos(Base):
    __tablename__ = 'Photos'

    id = Column(Integer, primary_key=True)
    photo1 = Column(String(100))
    photo2 = Column(String(100))
    pet_id = Column(Integer, ForeignKey('Pets.id'))

    photo = relationship("Pets", back_populates="Photos")
    Pets.Photos = relationship("Photos", order_by = id, back_populates="photo")
    def __repr__(self):
        return "<Photos(photo1='%s', photo2='%s')>" %(self.photo1, self.photo2)


def add_pet(body):  # noqa: E501
    """Add a new pet to the store

     # noqa: E501

    :param body: Pet object that needs to be added to the store
    :type body: dict | bytes

    :rtype: None
    """
    body = connexion.request.form
    conn = engine.connect()
    Session = sessionmaker(bind=engine)
    Session.configure(bind=engine)
    session = Session()
    pet = Pets(name = body['name'], status = body['status'])
    tags = body['tags']
    print(tags)
    tags_list = re.split(r"\W+", tags)
    tags = [ tags_list[i] for i in range(len(tags_list)) if tags_list[i]]
    print(tags)
    
    #   pet.Tags = [Tags(tag1 = tags[0]), Tags(tag2 = tags[1])]

    photoUrls = body['photoUrls']
    photo_list = re.split(r"\W+", photoUrls)
    photos = [ photo_list[i] for i in range(len(photo_list)) if photo_list[i]]
    print(photos)
    
    pet.Tags = [Tags(tag1 = tags[0], tag2 = tags[1])]
    pet.Photos = [Photos(photo1 = photos[0], photo2 = photos[1])]
    
    
    session.add(pet)
    session.commit()
    
    if connexion.request.is_json:
        body = Pet.from_dict(connexion.request.get_json())  # noqa: E501
    return json.dumps(body)


def delete_pet(pet_id, api_key=None):  # noqa: E501
    """Deletes a pet

     # noqa: E501

    :param pet_id: Pet id to delete
    :type pet_id: int
    :param api_key: 
    :type api_key: str

    :rtype: None
    """
    return 'do some magic!'


def find_pets_by_status(status):  # noqa: E501
    """Finds Pets by status

    Multiple status values can be provided with comma separated strings # noqa: E501

    :param status: Status values that need to be considered for filter
    :type status: List[str]

    :rtype: List[Pet]
    """
    return 'do some magic!'


def find_pets_by_tags(tags):  # noqa: E501
    """Finds Pets by tags

    Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing. # noqa: E501

    :param tags: Tags to filter by
    :type tags: List[str]

    :rtype: List[Pet]
    """
    return 'do some magic!'


def get_pet_by_id(pet_id):  # noqa: E501
    """Find pet by ID

    Returns a single pet # noqa: E501

    :param pet_id: ID of pet to return
    :type pet_id: int

    :rtype: Pet
    """
    return 'do some magic!'


def update_pet(body):  # noqa: E501
    """Update an existing pet

     # noqa: E501

    :param body: Pet object that needs to be added to the store
    :type body: dict | bytes

    :rtype: None
    """
    if connexion.request.is_json:
        body = Pet.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def update_pet_with_form(pet_id, name=None, status=None):  # noqa: E501
    """Updates a pet in the store with form data

     # noqa: E501

    :param pet_id: ID of pet that needs to be updated
    :type pet_id: int
    :param name: 
    :type name: str
    :param status: 
    :type status: str

    :rtype: None
    """
    return 'do some magic!'


def upload_file(pet_id, body=None):  # noqa: E501
    """uploads an image

     # noqa: E501

    :param pet_id: ID of pet to update
    :type pet_id: int
    :param body: 
    :type body: dict | bytes

    :rtype: ApiResponse
    """
    if connexion.request.is_json:
        body = Object.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'
